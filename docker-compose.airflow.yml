# Docker Compose para Apache Airflow
# IntegraciÃ³n con el proyecto Rainbow Six ML (Kedro)

services:
  # Base de datos PostgreSQL para Airflow
  airflow-postgres:
    image: postgres:15-alpine
    container_name: rainbow-six-airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    networks:
      - rainbow-six-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Inicializador de Airflow
  airflow-init:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    container_name: rainbow-six-airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=M0Q5RhSDhhTEZwd5bShf0hILBvTMz2q3-vdDvkiHxOE=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - KEDRO_HOME=/app
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/src
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./proyecto-ml:/app
    networks:
      - rainbow-six-network
    depends_on:
      airflow-postgres:
        condition: service_healthy
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@rainbowsix.com --password admin &&
        cd /app && kedro airflow create --all -e base -t /opt/airflow/dags &&
        echo 'Airflow initialized successfully'
      "
    restart: "no"

  # Webserver de Airflow
  airflow-webserver:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    container_name: rainbow-six-airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=M0Q5RhSDhhTEZwd5bShf0hILBvTMz2q3-vdDvkiHxOE=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - KEDRO_HOME=/app
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/src
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./proyecto-ml:/app
    ports:
      - "8080:8080"
    networks:
      - rainbow-six-network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: airflow webserver --port 8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Scheduler de Airflow
  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    container_name: rainbow-six-airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=M0Q5RhSDhhTEZwd5bShf0hILBvTMz2q3-vdDvkiHxOE=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - KEDRO_HOME=/app
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/src
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./proyecto-ml:/app
    networks:
      - rainbow-six-network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: airflow scheduler
    restart: unless-stopped

volumes:
  airflow_postgres_data:
    driver: local

networks:
  rainbow-six-network:
    name: rainbow-six-ml-network
    driver: bridge