services:
  # ===========================================
  # SERVICIOS DE PRODUCCI√ìN
  # ===========================================

  # Servicio principal de Kedro para producci√≥n (Rainbow Six ML)
  kedro-prod:
    build:
      context: .
      dockerfile: docker/Dockerfile.kedro
    container_name: rainbow-six-kedro-prod
    working_dir: /app/proyecto-ml
    command: kedro run
    environment:
      - KEDRO_HOME=/app/proyecto-ml
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/proyecto-ml/src
      - KEDRO_ENV=production
    volumes:
      - ./proyecto-ml/data:/app/proyecto-ml/data
      - ./proyecto-ml/conf:/app/proyecto-ml/conf
      - ./proyecto-ml/logs:/app/proyecto-ml/logs
      - ./proyecto-ml/notebooks:/app/proyecto-ml/notebooks
      - ./proyecto-ml/src:/app/proyecto-ml/src
    networks:
      - rainbow-six-network
    profiles:
      - production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kedro", "info"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scheduler para ejecuci√≥n autom√°tica de pipelines del proyecto
  kedro-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.kedro
    container_name: rainbow-six-kedro-scheduler
    working_dir: /app/proyecto-ml
    command: |
      sh -c "
      echo 'üöÄ Iniciando scheduler de Rainbow Six ML...'
      while true; do
        echo '‚è∞ Ejecutando pipelines de ML programados - $$(date)'
        kedro run --pipeline rainbow_six
        kedro run --pipeline modelo_clasificacion
        kedro run --pipeline modelo_regresion
        kedro run --pipeline model_comparison
        echo '‚úÖ Pipelines de ML completados - $$(date)'
        echo '‚è≥ Esperando 6 horas para pr√≥xima ejecuci√≥n...'
        sleep 21600
      done
      "
    environment:
      - KEDRO_HOME=/app/proyecto-ml
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/proyecto-ml/src
      - KEDRO_ENV=production
    volumes:
      - ./proyecto-ml/data:/app/proyecto-ml/data
      - ./proyecto-ml/conf:/app/proyecto-ml/conf
      - ./proyecto-ml/logs:/app/proyecto-ml/logs
      - ./proyecto-ml/notebooks:/app/proyecto-ml/notebooks
      - ./proyecto-ml/src:/app/proyecto-ml/src
    networks:
      - rainbow-six-network
    profiles:
      - production
    restart: unless-stopped
    depends_on:
      - kedro-prod

  # Servicio de JupyterLab para desarrollo
  jupyter-lab:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    image: rainbow-six-jupyter:latest
    container_name: rainbow-six-jupyter
    working_dir: /app/proyecto-ml
    environment:
      - KEDRO_HOME=/app/proyecto-ml
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/proyecto-ml/src
    volumes:
      - ./proyecto-ml/data:/app/proyecto-ml/data
      - ./proyecto-ml/conf:/app/proyecto-ml/conf
      - ./proyecto-ml/logs:/app/proyecto-ml/logs
      - ./proyecto-ml/notebooks:/app/proyecto-ml/notebooks
      - ./proyecto-ml/src:/app/proyecto-ml/src
    ports:
      - "8888:8888"
    networks:
      - rainbow-six-network
    profiles:
      - development
    restart: unless-stopped

  # ===========================================
  # SERVICIOS DE DESARROLLO
  # ===========================================

  # Servicio de Kedro Viz para visualizaci√≥n
  kedro-viz:
    build:
      context: .
      dockerfile: docker/Dockerfile.kedro
    container_name: rainbow-six-kedro-viz
    working_dir: /app/proyecto-ml
    command: ["kedro", "viz", "run", "--host", "0.0.0.0", "--port", "4141"]
    environment:
      - KEDRO_HOME=/app/proyecto-ml
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/proyecto-ml/src
    volumes:
      - ./proyecto-ml/data:/app/proyecto-ml/data
      - ./proyecto-ml/conf:/app/proyecto-ml/conf
      - ./proyecto-ml/logs:/app/proyecto-ml/logs
      - ./proyecto-ml/src:/app/proyecto-ml/src
    ports:
      - "4141:4141"
    networks:
      - rainbow-six-network
    profiles:
      - development
      - production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4141"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de datos PostgreSQL para producci√≥n
  postgres:
    image: postgres:15-alpine
    container_name: rainbow-six-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rainbow_six_ml}
      - POSTGRES_USER=${POSTGRES_USER:-ml_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rainbow123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"  # Puerto 5433 para evitar conflicto con PostgreSQL del sistema
    networks:
      - rainbow-six-network
    profiles:
      - database
      - production
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ml_user} -d ${POSTGRES_DB:-rainbow_six_ml}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: rainbow-six-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rainbow-six-network
    profiles:
      - cache
      - development
      - production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio de monitoreo (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rainbow-six-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rainbow-six-network
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  rainbow-six-network:
    driver: bridge